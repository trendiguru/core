#braini servers:
#cuda, cudnn
#theano/keras on netanels'
#caffe
#gunicorn
#gender-falcon
#IPs need to be set at
#neurodoll: trendi.paperdoll @ neurodoll_falcon_client.py
#paperdoll: trendi.paperdoll @ paperdoll_falcon_client.py
#gender      : trendi                       @ page_results.py
#labeler      : trendi                       @ page_results.py

#cuda
sudo apt-get update
#get toolkit
wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run
#wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_7.5-18_amd64.deb
sudo sh cuda_7.5.18_linux.run

#sudo dpkg -i cuda-repo-ubuntu1404_7.5-18_amd64.deb

sudo apt-get update
#sudo apt-get install cuda

#put into .bashrc
#usr/local/cuda is symlinked to /usr/local/cuda7.5 so this wont need to change in future
export PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH



#cudnn
#get cunddn tar
#need to scp this from pc, wget is forbidden
#wget https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v5.1/rc/7.5/cudnn-7.5-linux-x64-v5.1-rc-tgz
#(from local machine where you got the tarfile...)
scp cudnn-7.5-linux-x64-v5.1-rc.tgz root@[server ip]:/root
#(on server)
 tar -xvf cudnn-7.5-linux-x64-v5.1-rc.tgz
cp cuda/include/cudnn.h /usr/local/cuda/include
cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/lib64/libcudnn*

#cd <installpath>
#    export LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH
#    Add <installpath> to your build and link process by adding -I<installpath> to your compile
#    line and -L<installpath> -lcudnn to your link line.

#install docker
# see https://docs.docker.com/engine/installation/linux/ubuntulinux/
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates
sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
apt-get install apparmor
#edit /etc/apt/sources.list.d/docker.list, add this line
echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" > /etc/apt/sources.list.d/docker.list
sudo apt-get update
sudo apt-get install docker-engine
sudo service docker start
sudo docker run hello-world
sudo groupadd docker
sudo usermod -aG docker ubuntu


# Install nvidia-docker and nvidia-docker-plugin
wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.0-rc.3/nvidia-docker_1.0.0.rc.3-1_amd64.deb
sudo dpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb

# Test nvidia-smi
nvidia-docker run --rm nvidia/cuda nvidia-smi

make sure rsa key permissions are ok to allow git clone
chmod 400 ~/.ssh/id_rsa

#get our repo from https://github.com/trendiguru/tg_docker/blob/master/tg_base.Dockerfile
#build it using

git clone https://github.com/trendiguru/tg_docker.git
nvidia-docker build -t tg_base:1 -f tg_base.Dockerfile .

#get dockerfiles cuda-caffe, cuda-keras, etc
#buildthem using (for example)
nvidia-docker build -t tg:caffe -f cuda-caffe.Dockerfile .
nvidia-docker build -t tg:theano -f cuda-theano.Dockerfile .
nvidia-docker build -t tg:keras -f cuda-keras.Dockerfile .

#tensorflow https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/docker
docker run -it -p 8888:8888 gcr.io/tensorflow/tensorflow






##################
apt-get install git
apt-get install ipython
#install pip

#caffe
git clone https://github.com/BVLC/caffe.git
sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler
sudo apt-get install --no-install-recommends libboost-all-dev
#blas
sudo apt-get install libatlas-base-dev
pip install protobuf, glog, gflags, hdf5
wget https://sourceforge.net/projects/boost/files/boost/1.61.0/boost_1_61_0.tar.bz2
sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-dev libhdf5-serial-dev
sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev protobuf-compiler
sudo apt-get install libatlas-base-dev


glog
wget https://google-glog.googlecode.com/files/glog-0.3.3.tar.gz
tar zxvf glog-0.3.3.tar.gz
cd glog-0.3.3
./configure
make && make install

#numpy/scipy
sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose

#theano/keras
sudo apt-get install python-numpy python-scipy python-dev python-pip python-nose g++ libopenblas-dev git
sudo pip install nose_parameterized

sudo pip install Theano

pip install h5py
pip install keras

#############

lmdb
git clone https://github.com/LMDB/lmdb
cd lmdb/libraries/liblmdb
make && make install